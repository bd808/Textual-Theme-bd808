// Generated by CoffeeScript 1.12.7
(function() {
  "use strict";
  var _handlers, _trigger, after, every,
    slice = [].slice;

  after = function(ms, cb) {
    return setTimeout(cb, ms);
  };

  every = function(ms, cb) {
    return setInterval(cb, ms);
  };

  _handlers = {};

  _trigger = function() {
    var args, event, fn, handler, i, len, ref;
    event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (_handlers[event]) {
      ref = _handlers[event];
      fn = function(handler) {
        var err;
        try {
          handler.apply(null, args);
        } catch (error) {
          err = error;
          console.log("Error handling " + event + " with " + handler + ": " + err);
        }
      };
      for (i = 0, len = ref.length; i < len; i++) {
        handler = ref[i];
        fn(handler);
      }
    }
  };

  Textual.bind = function(event, handler) {
    if (_handlers[event] == null) {
      _handlers[event] = [];
    }
    _handlers[event].push(handler);
  };

  Textual.viewBodyDidLoad = function() {
    _trigger("viewBodyDidLoad");
    return Textual.fadeOutLoadingScreen(1.00, 0.95);
  };

  Textual.messageAddedToView = function(line, fromBuffer) {
    var element;
    element = document.getElementById("line-" + line);
    if (!element) {
      return;
    }
    _trigger("messageAddedToView", element);
    ConversationTracking.updateNicknameWithNewMessage(element);
  };

  Textual.nicknameSingleClicked = function(e) {
    _trigger("nicknameSingleClicked");
    ConversationTracking.nicknameSingleClickEventCallback(e);
  };

}).call(this);
// Generated by CoffeeScript 1.12.7
(function() {
  var HTML_BUG, RE_BUG;

  RE_BUG = /\b(?:bug|bugzilla|bz)[\|:]?\s*#?(\d+)\b/ig;

  HTML_BUG = '<a href="https://bugzilla.wikimedia.org/$1">$&</a>';

  Textual.bind('messageAddedToView', function(line) {
    if (RE_BUG.test(line.innerHTML)) {
      return line.innerHTML = line.innerHTML.replace(RE_BUG, HTML_BUG);
    }
  });

}).call(this);
// Generated by CoffeeScript 1.12.7
(function() {
  "use strict";
  var NickColorizer, colorNicks;

  NickColorizer = (function() {
    function NickColorizer() {
      this.key = 'textual.colorNicks';
      this.css = document.createElement('style');
      this.css.id = 'textual-colorNicks';
      this.css.type = 'text/css';
      this.css.media = 'all';
      Textual.bind('messageAddedToView', (function(_this) {
        return function(line) {
          return _this.newMessagePostedToView(line);
        };
      })(this));
      Textual.bind('viewBodyDidLoad', (function(_this) {
        return function() {
          return _this.viewFinishedLoading();
        };
      })(this));
    }

    NickColorizer.prototype.load = function() {
      var val;
      val = localStorage.getItem(this.key);
      if (val) {
        return JSON.parse(val);
      } else {
        return {};
      }
    };

    NickColorizer.prototype.save = function(obj) {
      localStorage.setItem(this.key, JSON.stringify(obj));
    };

    NickColorizer.prototype.cleanNick = function(nick) {
      nick = nick.toLowerCase();
      nick = nick.replace(/[`_]+$/, '');
      nick = nick.replace(/\|.*$/, '');
      return nick.replace(/^(!\[|!\{)(.*)(\[.*\]|\{.*\})$/, '$2');
    };

    NickColorizer.prototype.getHash = function(nick) {
      var cleaned, hash, i;
      cleaned = this.cleanNick(nick);
      hash = 0;
      i = 0;
      while (i < cleaned.length) {
        hash = cleaned.charCodeAt(i) + (hash << 6) + (hash << 16) - hash;
        i++;
      }
      return hash;
    };

    NickColorizer.prototype.getColor = function(nick) {
      var deg, h, l, nickHash, s;
      nickHash = this.getHash(nick);
      deg = nickHash % 360;
      h = (deg < 0 ? 360 + deg : deg);
      l = 50;
      if (h >= 30 && h <= 210) {
        l = 30;
      }
      s = 20 + Math.abs(nickHash) % 80;
      return "hsl(" + h + ", " + s + "%, " + l + "%)";
    };

    NickColorizer.prototype.addNick = function(nick) {
      var c, color;
      c = this.load();
      if (nick in c) {
        return;
      }
      color = this.getColor(nick);
      c[nick] = color;
      this.save(c);
      this.addCss(nick, color);
    };

    NickColorizer.prototype.viewFinishedLoading = function() {
      var c, nick;
      c = this.load();
      for (nick in c) {
        this.addCss(nick, c[nick]);
      }
      document.head.appendChild(this.css);
    };

    NickColorizer.prototype.newMessagePostedToView = function(line) {
      var e, fn, j, len, ref;
      ref = line.querySelectorAll(".sender, .inline_nickname");
      fn = (function(_this) {
        return function(e) {
          var nick;
          nick = false;
          if (e.className === "inline_nickname") {
            nick = e.innerText;
            e.setAttribute("data-nickname", e.innerText);
          } else {
            nick = e.getAttribute("data-nickname");
          }
          if (nick) {
            _this.addNick(nick);
          }
        };
      })(this);
      for (j = 0, len = ref.length; j < len; j++) {
        e = ref[j];
        fn(e);
        return;
      }
    };

    NickColorizer.prototype.addCss = function(nick, color) {
      this.css.textContent += ("\n.sender[data-nickname='" + nick + "'], ") + (".inline_nickname[data-nickname='" + nick + "']") + ("{ color: " + color + " !important; }");
    };

    return NickColorizer;

  })();

  colorNicks = new NickColorizer();

}).call(this);
// Generated by CoffeeScript 1.12.7
(function() {
  var HTML_GERRIT, RE_GERRIT;

  RE_GERRIT = /\b(?:gerrit)[|:](\S+)\b/ig;

  HTML_GERRIT = '<a href="https://gerrit.wikimedia.org/r/?#q,$1,n,z">$&</a>';

  Textual.bind('messageAddedToView', function(line) {
    if (RE_GERRIT.test(line.innerHTML)) {
      return line.innerHTML = line.innerHTML.replace(RE_GERRIT, HTML_GERRIT);
    }
  });

}).call(this);
// Generated by CoffeeScript 1.12.7
(function() {
  var MUTED,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  MUTED = ['analytics-logbot', 'antispammeta', 'arseny', 'AsimovBot', 'cerebrumbot', 'cp', 'cyberpower', 'danny_b', 'ecmabot-wm', 'eir', 'gh-datavalues', 'gh-wmde', 'github', 'github-wmde', 'grrrit-wm', 'guest', 'icinga-wm', 'ircnotifier', 'justberry', 'krrrit-wm', 'labs-morebots', 'libel', 'librenms-wmf', 'mw-jenkinsbot', 'nokib', 'paladox', 'phabot', 'phawikibugs', 'phawkes', 'pywikibugs', 'services_bot', 'shinken-wm', 'slander', 'snitch', 'stashbot', 'travis-ci', 'wikibugs', 'wikipedia-github', 'wikiphabot', 'wm-bot', 'wm-labs-meetbot', 'wmf-insecte', 'wmf-selenium-bot', 'zppix'];

  Textual.bind('messageAddedToView', function(line) {
    var cleanNick, e, ref, type;
    e = line.querySelector('.sender');
    cleanNick = function(nick) {
      return nick.toLowerCase().replace(/[`_]+$/, "").replace(/\|.*$/, "").replace(/^(!\[|!\{)(.*)(\[.*\]|\{.*\})$/, "$2").replace(/\d+$/, "");
    };
    if (e && (ref = cleanNick(e.getAttribute('data-nickname')), indexOf.call(MUTED, ref) >= 0)) {
      type = line.getAttribute('data-line-type');
      line.setAttribute('data-line-type', type + " muted");
    }
  });

}).call(this);
// Generated by CoffeeScript 1.12.7
(function() {
  var HTML_PHAB, RE_PHAB;

  RE_PHAB = /([^\/])\b([TMP]\d+)\b/g;

  HTML_PHAB = '$1<a href="https://phabricator.wikimedia.org/$2">$2</a>';

  Textual.bind('messageAddedToView', function(line) {
    var e, i, len, ref, results;
    if (RE_PHAB.test(line.innerHTML)) {
      ref = line.querySelectorAll('.innerMessage');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        e = ref[i];
        results.push((function(_this) {
          return function(e) {
            return e.innerHTML = e.innerHTML.replace(RE_PHAB, HTML_PHAB);
          };
        })(this)(e));
      }
      return results;
    }
  });

}).call(this);
